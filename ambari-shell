#!/usr/bin/python -O

from __future__ import print_function


import json
from urllib import quote

from AmbariServer import AmbariServer
from HadoopShell import HadoopCmd, Seperator, HadoopShell


def get_cluster_url(cluster=None):
    if cluster is None:
        return "/clusters"
    else:
        return quote("/clusters/%s" % cluster)


def get_host_url(cluster=None):
    if cluster is None:
        return "/host"
    else:
        return quote("/clusters/%s/hosts" % cluster)


def get_service_url(cluster, service=None):
    if service is None:
        return quote("/clusters/%s/services" % cluster)
    else:
        return quote("/clusters/%s/services/%s" % (cluster, service.upper()))


def get_host_component_url(cluster, hostname, component=None):
    if component is None:
        return quote("/clusters/%s/hosts/%s/host_components" % (
            cluster, hostname))
    else:
        return quote("/clusters/%s/hosts/%s/host_components/%s" % (
            cluster, hostname, component.upper()))


def get_component_url(cluster, service, component):
    return quote("/clusters/%s/services/%s/components/%s" % (
                     cluster, service.upper(), component.upper()))


def get_alert_url(cluster, alert_id=None):
    if alert_id is None:
        return quote("/clusters/%s/alert_definitions" % cluster)
    else:
        return quote("/clusters/%s/alert_definitions/%d" % (cluster, alert_id))


url_for = {
    "cluster": get_cluster_url,
    "host": get_host_url,
    "service": get_service_url,
    "component": get_component_url,
    "host_component": get_host_component_url,
    "alert": get_alert_url,
}


class AmbariShell(HadoopShell):
    rootpath = "/api/v1"
    commands = HadoopShell.commands + [
        HadoopCmd("list", "List all clusters"),
        HadoopCmd("list hosts", "List hosts", "[clusters]"),
        HadoopCmd("list host_components", "List hosts together with components",
                 ["<cluster>", "[host]"]),
        HadoopCmd("list services", "List services together with components",
                  ["<cluster>", "[service]"]),
        HadoopCmd("list alerts", "List all alerts", "<cluster>"),
        Seperator(),
        HadoopCmd("show", "Show a cluster", "<cluster>"),
        HadoopCmd("show component", "Show a component",
                  ["<cluster>", "<service>", "<component>"]),
        HadoopCmd("add service", "Add a service", ["<cluster>", "<service>"]),
        HadoopCmd("add component", "Add a component",
                  ["<cluster>", "<service>", "<component>"]),
        HadoopCmd("add host_component", "Add a component on a host",
                  ["<cluster>", "<host>", "<component>"]),
        Seperator(),
        HadoopCmd("install service", "Install a service",
                  ["<cluster>", "<service"]),
        Seperator(),
        HadoopCmd("start service", "Start a service",
                  ["<cluster>", "<service>"]),
        HadoopCmd("stop service", "Stop a service", ["<cluster>", "<service>"]),
        HadoopCmd("delete service", "Delete a service",
                  ["<cluster>", "<service>"]),
        HadoopCmd("start component", "Start a component",
                  ["<cluster>", "<service>", "<component>"]),
        HadoopCmd("stop component", "Stop a component",
                  ["<cluster>", "<service", "<component>"]),
    ]

    def __init__(self):
        super(AmbariShell, self).__init__()

    @property
    def banner(self):
        return "Ambari Shell"


# command handlers
    def do_list(self, data):
        self.do_echo(self.server.do_list(data))

    def do_show(self, data):
        self.do_echo(self.server.do_show(data))

    def do_add(self, data):
        self.do_echo(self.server.do_add(data))

    def do_install(self, data):
        self.do_echo(self.server.do_install(data))

    def do_start(self, data):
        self.do_echo(self.server.do_start(data))

    def do_stop(self, data):
        self.do_echo(self.server.do_stop(data))

    def do_delete(self, data):
        self.do_echo(self.server.do_delete(data))

    def get_parser(self):
        parser = super(AmbariShell, self).get_parser()
        parser.add_option("--password", default="admin")
        parser.set_defaults(user="admin")

        return parser

# ---- main ----
if __name__ == '__main__':
    shell = AmbariShell()
    shell.start(AmbariServer)

