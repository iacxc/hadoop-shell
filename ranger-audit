#!/usr/bin/python


from collections import namedtuple
ColType = namedtuple("ColType", ["value", "color"])
import pypyodbc
pypyodbc.lowercase = False


def time2str(dt):
    if dt is None:
        return "None"
    else:
        return dt.strftime("%Y-%m-%d#%H:%M:%S")


def passOrdeny(v):
    return ColType("passed", "green") if v else ColType("denied", "red")


def display_audit(dbhost):
    from bottle import Bottle, run, template

    app = Bottle()

    @app.route("/hello")
    def hello():
        return "Hello World"

    @app.route("/")
    def root():
        conn_info = {"Dsn"      : "mysql",
                     "Server"   : dbhost,
                     "Database" : "ranger_audit",
                     "UID"      : "ranger_audit",
                     "PWD"      : "ranger"}
        connstr = ";".join("%s=%s" % (k,v) for k,v in conn_info.items())

        conn = pypyodbc.connect(connstr)
        cursor = conn.cursor()

        fields = ["policy_id as 'Policy ID'",
                  "event_time as 'Event Time'",
                  "request_user as User",
                  "resource_type as Type",
                  "resource_path as 'Resource Name'",
                  "access_type as 'Access Type'",
                  "access_result as Result",
                  "acl_enforcer as 'Access Enforcer'",
                  "client_ip as 'Client IP'",
                  "event_count as 'Event Count'"]
        cursor.execute("""select {fields} from xa_access_audit
        where repo_name like 'hdp_caiche%'
        order by event_time desc
        limit 100 """.format(fields=",".join(fields)))

        datarows = []
        for row in cursor.fetchall():
            datarows.append((ColType(row["Policy ID"], None),
                       ColType(time2str(row["Event Time"]), None),
                       ColType(row["User"], None),
                       ColType(row["Type"], None),
                       ColType(row["Resource Name"], None),
                       ColType(row["Access Type"], None),
                       passOrdeny(row["Result"]),
                       ColType(row["Access Enforcer"], None),
                       ColType(row["Client IP"], None),
                       ColType(row["Event Count"], None)))

        return template("ranger-audit.tpl",
                        colnames=[f[0] for f in cursor.description],
                        rows=datarows)


    import socket
    run(app, host=socket.getfqdn(), port=9099, debug=True)


if __name__ == "__main__":
    from optparse import OptionParser

    parser = OptionParser()
    parser.add_option("--dbhost")

    opts, args = parser.parse_args()

    display_audit(opts.dbhost)



